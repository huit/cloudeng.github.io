<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>HUIT Cloud Engineering</title>
        <description>HUIT Cloud Engineering - HUIT Cloud Engineering</description>
        <link>http://cloudhacks.huit.harvard.edu</link>
        <link>http://cloudhacks.huit.harvard.edu</link>
        <lastBuildDate>2013-11-01T15:31:21-04:00</lastBuildDate>
        <pubDate>2013-11-01T15:31:21-04:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Developing Cloudlets</title>
                <description>&lt;p&gt;So, in our attempts to develop cloudlets (packages for &lt;a href=&quot;https://github.com/huit/nepho&quot;&gt;Nepho&lt;/a&gt;) in some sort of reasonable fashion, we recommend a Git workflow that looks something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Fork the &lt;a href=&quot;https://github.com/cloudlets/nepho-example&quot;&gt;example cloudlet&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rename your fork to something less generic, and check it out.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone https://github.com/cloudlets/nepho-railsapp.git
Cloning into &amp;#39;nepho-railsapp&amp;#39;...
remote: Counting objects: 78, done.
remote: Compressing objects: 100% (46/46), done.
remote: Total 78 (delta 16), reused 74 (delta 12)
Unpacking objects: 100% (78/78), done.
Checking connectivity... done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a &lt;code&gt;git remote&lt;/code&gt; called &amp;quot;example&amp;quot; that points to the original example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ git remote add example https://github.com/cloudlets/nepho-example.git
$ git remote -v
example https://github.com/cloudlets/nepho-example.git (fetch)
example https://github.com/cloudlets/nepho-example.git (push)
origin  https://github.com/cloudlets/nepho-railsapp.git (fetch)
origin  https://github.com/cloudlets/nepho-railsapp.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start developing your cloudlet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Periodically pull in updates from the example cloudlet as we make improvements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ git pull example master
From github.com:cloudlets/nepho-example
 * branch            master     -&amp;gt; FETCH_HEAD
Updating 2bb727d..729e139
Fast-forward
 README.md            |  26 ++++++++++++
 data/.gitignore      |   2 +-
 hooks/bootstrap      | 138 +++++++++++++++++++++++++++++++++++++-------------------------
 hooks/configure      |  18 +++++---
 hooks/deploy         |  15 ++++++-
 6 files changed, 136 insertions(+), 314 deletions(-)
 create mode 100644 README.md
 mode change 100644 =&amp;gt; 100755 hooks/bootstrap
 mode change 100644 =&amp;gt; 100755 hooks/configure
 mode change 100644 =&amp;gt; 100755 hooks/deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;#39;re concerned about our updates breaking your code, I recommend that instead of pulling directly into your &lt;code&gt;master&lt;/code&gt; branch, every time you pull you make a topic branch and pull into that first, then test.&lt;/p&gt;

&lt;p&gt;Good resources for learning Git include &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt; and &lt;a href=&quot;http://gitready.com/&quot;&gt;Git Ready&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://cloudhacks.huit.harvard.edu/hacking/2013/10/29/developing-cloudlets.html</link>
                <guid>http://cloudhacks.huit.harvard.edu/hacking/2013/10/29/developing-cloudlets</guid>
                <pubDate>2013-10-29T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Simple RSpec tests for Puppet Modules</title>
                <description>&lt;h3 id=&quot;toc_0&quot;&gt;&amp;quot;Test yo code!&amp;quot;&lt;/h3&gt;

&lt;p&gt;While this post isn&amp;#39;t directly &amp;quot;cloud&amp;quot; related, to make our nodes and application patterns work,
we rely heavily on configuration management tools like Puppet, Ansible, Chef, etc. 
Since we rely so heavily on  automated configuration management, it seems like not
only a good idea, but a requirement get as much testing done early and to automate it. Now, truth 
be told, Ruby and rspec are brave new lands for me personally so I&amp;#39;ve perhaps put out code
&lt;strong&gt;may not&lt;/strong&gt; have always been the best tested... I know it&amp;#39;s unthinkable, but hey, good is better then perfect!
Or as per the Iron Triangle -  &amp;quot;Good, Cheap, Fast, pick two&amp;quot; &lt;/p&gt;

&lt;p&gt;I spent part of this weekend hacking around on rspec-puppet, configuring some basic tests,
and hooking the github repo into &lt;a href=&quot;http://travis-ci.org&quot;&gt;travis-ci.&lt;/a&gt; While there are lots of 
great blog posts out there on &lt;strong&gt;how&lt;/strong&gt; to do it, I felt pretty discombobulated by all the
copies of Rakefile, gemfile and spec_helper.rb there were running around, and found myself
working in circles. Hopeful this post will help someone whose just starting our with Ruby and
rspec/rspec-puppet testing and make things a little clearer. &lt;/p&gt;

&lt;p&gt;I Decided to start with a module I wrote to deploy and manage &lt;a href=&quot;https://github.com/huit/puppet-splunk&quot;&gt;Splunk&lt;/a&gt; which
while still in progress I thought would be a decent, simple place to start. &lt;/p&gt;

&lt;h3 id=&quot;toc_1&quot;&gt;&amp;quot;Why Test?&amp;quot;&lt;/h3&gt;

&lt;p&gt;You might find yourself saying &amp;quot;I can run &amp;#39;puppet apply --verbose&amp;#39; and &amp;#39;puppet validate parser&amp;#39;  as well as the next guy..
why bother with all the fancy tests??!&amp;quot;  to which I reply - &amp;quot;Badges... we need Badges&amp;quot; 
&lt;img src=&quot;/assets/images/travis-ci-passing-badge.png&quot; alt=&quot;Build Passing!&quot;&gt;
How awesome is it to know only know that a Module or project your may want to use.. works??! 
Pretty darn awesome.  &lt;/p&gt;

&lt;p&gt;Although badges are awesome, you might not need no stinking badges... &lt;strong&gt;sigh&lt;/strong&gt; as your
modules get more and more complex, it becomes really useful to have some testing.  For a 
while now, I&amp;#39;ve been using &amp;#39;puppet apply --verbose&amp;#39;, &amp;#39;puppet agent --test&amp;#39;, &amp;#39;puppet validate parser&amp;#39;
tests in the &lt;MODULE&gt;/tests directory, which worked ok for a while. Then I discovered Vagrant
and started spinning up vagrant boxes of different flavors to run tests against, which was/IS awesome
but it&amp;#39;s also a pain to keep spinning boxes. It also takes &lt;strong&gt;TIME&lt;/strong&gt; something that I never have enough of.&lt;/p&gt;

&lt;p&gt;Automating your tests gives you the ability to pass parameters, Facter Facts,  and much more
in a nice, fast, reusable format. I found a presentation by &lt;a href=&quot;http://vstone.eu/talks/puppet-module-testing/&quot;&gt;Jan Vansteenkiste&lt;/a&gt;
About this where he hits the nail on the head!&lt;/p&gt;

&lt;h3 id=&quot;toc_2&quot;&gt;&amp;quot;The How&amp;quot;&lt;/h3&gt;

&lt;p&gt;I spend a good amount of time figuring out the &amp;quot;how&amp;quot; of getting rspec-puppet working. in
My case, I had so many different versions of the base files, it was starting to make my head spin.
Let me save you a bunch of time. Use the &lt;a href=&quot;https://github.com/puppetlabs/puppetlabs_spec_helper&quot;&gt;Puppet Labs Sec Helper Gem&lt;/a&gt;
This will save you a lot of time and Ruby frustration. You may find the &lt;a href=&quot;http://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing&quot;&gt;Puppet Labs Post about the spec_helper gem useful!&lt;/a&gt;
One of the really useful features of the puppetlabs_spec_helper gem is it&amp;#39;s ability to pull in your dependency modules!&lt;/p&gt;

&lt;p&gt;First install the Gem&amp;#39;s you&amp;#39;ll need.  I found the easiest way to do this was with &lt;a href=&quot;http://bundler.io/&quot;&gt;bundler.&lt;/a&gt; 
Set up a Gemfile at the root of your module: &lt;/p&gt;

&lt;p&gt;Example Gemfile
```ruby
source &amp;#39;&lt;a href=&quot;https://rubygems.org&quot;&gt;https://rubygems.org&lt;/a&gt;&amp;#39;&lt;/p&gt;

&lt;p&gt;if ENV.key?(&amp;#39;PUPPET_VERSION&amp;#39;)
  puppetversion = &amp;quot;= #{ENV[&amp;#39;PUPPET_VERSION&amp;#39;]}&amp;quot;
else
  puppetversion = [&amp;#39;&amp;gt;= 2.7&amp;#39;]
end&lt;/p&gt;

&lt;p&gt;gem &amp;#39;rake&amp;#39;
gem &amp;#39;puppet-lint&amp;#39;
gem &amp;#39;rspec-puppet&amp;#39;
gem &amp;#39;puppetlabs_spec_helper&amp;#39;
gem &amp;#39;puppet&amp;#39;, puppetversion
```&lt;/p&gt;

&lt;p&gt;Then using bundler just do a &amp;#39;bundle install&amp;#39; to get all the gems you&amp;#39;ll need for testing!&lt;/p&gt;

&lt;p&gt;Next setup your spec folders for testing, an easy way to do this is by running &amp;#39; rspec-puppet-init&amp;#39;
one word of caution though, to get puppetlabs_spec_helper working the way you want, you&amp;#39;ll need
to clean our the &amp;#39;spec/fixtures/modules/&lt;name&gt;&amp;#39; directory of symlinks and delete the &lt;modulename&gt; 
directory.  The puppetlabs_spec_helper gem will install and remove the directory and links for you, and 
fail if the links and directory already exist. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@dhcp-128-103-62-80 huit-test&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rspec-puppet-init
 + spec/classes/
 + spec/defines/
 + spec/functions/
 + spec/hosts/
 + spec/fixtures/
 + spec/fixtures/manifests/
 + spec/fixtures/modules/
 + spec/fixtures/modules/test/
 + spec/fixtures/manifests/site.pp
 + spec/fixtures/modules/test/manifests
!! spec/spec_helper.rb already exists and differs from template
 + Rakefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see from my test, it failed on spec_helper.rb since it already existed, don&amp;#39;t
worry about it, we are going to update that bad boy in just a moment :) &lt;/p&gt;

&lt;p&gt;Now lets set up our core config files. &lt;/p&gt;

&lt;p&gt;First, our Rakefile in the root of the module. puppetlabs_spec_helper lets us create a really 
simple Rakefile! For those of us with little to no Ruby skills.. this is quite nice. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;puppetlabs_spec_helper/rake_tasks&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we&amp;#39;ll set up .travis.yml in the root of the module. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1.8.7&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;bundler_args&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;me@example.com&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;PUPPET_VERSION=3.3.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;ll also want a  .fixtures.yml file so that puppetlabs_spec_helper can pull in any dependancies  you might need. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;fixtures&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;stdlib&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git://github.com/puppetlabs/puppetlabs-stdlib.git&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;initfile&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git://github.com/puppetlabs/puppetlabs-inifile.git&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;symlinks&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;splunk&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#{source_dir}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in the root directory of your module, you should  have a Gemfile, Rakefile,  .fixtures.yml, and .travis.yml
file. &lt;/p&gt;

&lt;p&gt;Now we can set up our spec_helper.rb file in the spec directory of your module. This is where puppetlabs_spec_helper
really jumped out as awesome.  It let me just have a single line spec_herlper.rb! &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;puppetlabs_spec_helper/module_spec_helper&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nice, simple, and clean. &lt;/p&gt;

&lt;p&gt;Lastly, you can create a simple test! In my case I created a really simple test just to ensure 
that my module loaded, and ran puppet-lint against my code.  Put your tests in the directory 
that matches the type of object your testing, in my case I was testing the Splunk class, so created a test
called  &amp;#39;puppet-splunk/spec/classes/splunk_spec.rb&amp;#39;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;splunk&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Splunk class with no parameters, basic test&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contain_package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;splunkforwarder&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contain_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;splunk&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;Done and Done&lt;/h3&gt;

&lt;p&gt;So thats pretty much it! After much hand wringing, I was able to get some simple tests working. 
In addition to being able to integrate this with something like travis-ci, this also allows you to
run things like puppet-lint tests quickly over all of your classes in a module without having to set up 
a git pre-commit hook. &lt;/p&gt;

&lt;p&gt;Check out &amp;#39;rake help&amp;#39; and &amp;#39;rake lint&amp;#39; from the root of your module! Pretty awesome stuff!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@dhcp-128-103-62-80 puppet-splunk&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
rake build            &lt;span class=&quot;c&quot;&gt;# Build puppet module package&lt;/span&gt;
rake clean            &lt;span class=&quot;c&quot;&gt;# Clean a built module package&lt;/span&gt;
rake coverage         &lt;span class=&quot;c&quot;&gt;# Generate code coverage information&lt;/span&gt;
rake &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# Display the list of available rake tasks&lt;/span&gt;
rake lint             &lt;span class=&quot;c&quot;&gt;# Check puppet manifests with puppet-lint&lt;/span&gt;
rake spec             &lt;span class=&quot;c&quot;&gt;# Run spec tests in a clean fixtures directory&lt;/span&gt;
rake spec_clean       &lt;span class=&quot;c&quot;&gt;# Clean up the fixtures directory&lt;/span&gt;
rake spec_prep        &lt;span class=&quot;c&quot;&gt;# Create the fixtures directory&lt;/span&gt;
rake spec_standalone  &lt;span class=&quot;c&quot;&gt;# Run spec tests on an existing fixtures directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;toc_4&quot;&gt;Useful links and Citations&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing&quot;&gt;http://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing&lt;/a&gt;
&lt;a href=&quot;https://github.com/puppetlabs/puppetlabs_spec_helper&quot;&gt;https://github.com/puppetlabs/puppetlabs_spec_helper&lt;/a&gt;
&lt;a href=&quot;http://puppetlabs.com/blog/testing-modules-in-the-puppet-forge&quot;&gt;http://puppetlabs.com/blog/testing-modules-in-the-puppet-forge&lt;/a&gt;
&lt;a href=&quot;http://bombasticmonkey.com/2012/03/02/automatically-test-your-puppet-modules-with-travis-ci/&quot;&gt;http://bombasticmonkey.com/2012/03/02/automatically-test-your-puppet-modules-with-travis-ci/&lt;/a&gt;
&lt;a href=&quot;https://github.com/vStone/puppet-testing-example&quot;&gt;https://github.com/vStone/puppet-testing-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tfhartmann&quot;&gt;@tfhartmann&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://cloudhacks.huit.harvard.edu/howto,%20puppet/2013/10/28/simple-rspec-tests-for-puppet-modules.html</link>
                <guid>http://cloudhacks.huit.harvard.edu/howto,%20puppet/2013/10/28/simple-rspec-tests-for-puppet-modules</guid>
                <pubDate>2013-10-28T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>OpenStack Meetup   Whats new in Havana</title>
                <description>&lt;p&gt;Last Night I went to the &lt;a href=&quot;http://www.meetup.com/Openstack-Boston/events/144295382/&quot;&gt;Openstack Boston meetup&lt;/a&gt; and had a great time! The presenters and organizers did a great job!  I figured I&amp;#39;d post my -very- raw notes from the meetup! &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tfhartmann&quot;&gt;@tfhartmann&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/7137760.js&quot;&gt; &lt;/script&gt;
</description>
                <link>http://cloudhacks.huit.harvard.edu/openstack/2013/10/24/openstack-meetup---whats-new-in-havana.html</link>
                <guid>http://cloudhacks.huit.harvard.edu/openstack/2013/10/24/openstack-meetup---whats-new-in-havana</guid>
                <pubDate>2013-10-24T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>How to Create a Post</title>
                <description>&lt;h2 id=&quot;toc_0&quot;&gt;How to Post to the blog&lt;/h2&gt;

&lt;p&gt;It seemed like a good idea to write up some direction for our team on how to post to this blog! Where better to host this doc? THE BLOG itself! &lt;/p&gt;

&lt;p&gt;Things you&amp;#39;ll need installed. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Jeykell 

&lt;ul&gt;
&lt;li&gt;This should be as easy as &amp;#39;gem install jekyll&amp;#39;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;s3_website&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This should just be &amp;#39;gem install s3_website&amp;#39; but it requries a new-ish version of ruby so you may have some tinkerin with rbenv like I did. &lt;/li&gt;
&lt;li&gt;You&amp;#39;ll need to set your AWS ID and Secrent as environment variables: &amp;#39;S3_ID&amp;#39; and &amp;#39;S3_SECRET&amp;#39;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Once you&amp;#39;ve got both of those gem&amp;#39;s installed, checkout the blog repo&lt;/li&gt;
&lt;li&gt;To Create a new post, from the root of the project run: &amp;#39;rake post title=&amp;quot;How to Create a Post&amp;quot;&amp;#39;&lt;/li&gt;
&lt;li&gt;Open with your favorite editor and create some text!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@dhcp-128-103-62-80 cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake post &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;How to Create a Post&amp;quot;&lt;/span&gt;
Creating new post: ./_posts/2013-10-24-how-to-create-a-post.md
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@dhcp-128-103-62-80 cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim _posts/2013-10-24-how-to-create-a-post.md 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;TEST your post!&lt;/strong&gt; I got bit by this a bunch due to slight differnece with markdown syntax. Test by running &amp;#39;jekyll serve  --trace&amp;#39; or &amp;#39;jekyll serve&amp;#39; then connect to http://localhost:4000 and checkt to see if your page looks right!&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Update git, and publish your post with s3_website &amp;#39;s3_website push&amp;#39;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That should be about it! &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tfhartmann&quot;&gt;@tfhartmann&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://cloudhacks.huit.harvard.edu/howto/2013/10/24/how-to-create-a-post.html</link>
                <guid>http://cloudhacks.huit.harvard.edu/howto/2013/10/24/how-to-create-a-post</guid>
                <pubDate>2013-10-24T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>How I made this Blog</title>
                <description>&lt;h2 id=&quot;toc_0&quot;&gt;How I made this Blog - A Drama in Many Parts.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;#The%20Quick%20and%20Dirty&quot;&gt;The Quick and Dirty&lt;/a&gt;
 &lt;a href=&quot;#Install%20s3_website&quot;&gt;Install s3_website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post may get a little long and ramble a bit, so let me skip directly to the payoff - quick and easy content managment on crazy robust and reliable infrastructure. Here&amp;#39;s the commands I need to add and post new content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim _posts/2013-09-27-hello-world.md 

 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve 

&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;s3_website push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and Behold - The power of S3 and CloudFront!  &lt;/p&gt;

&lt;h1 id=&quot;toc_1&quot;&gt;&lt;/h1&gt;

&lt;h3 id=&quot;toc_2&quot;&gt;The Quick and Dirty&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you have a new-ish version of ruby, if not, install &lt;a href=&quot;https://github.com/sstephenson/rbenv#homebrew-on-mac-os-x&quot;&gt;rbenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install or configure Jekyll ( I used Jekyll bootstrap to start with since I&amp;#39;m new to it )&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;s3_website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure &lt;em&gt;config.yml and s3&lt;/em&gt;website.yml&lt;/li&gt;
&lt;li&gt;Create Your first post under _posts&lt;/li&gt;
&lt;li&gt;Check to see if your site works locally by running -  jekyll serve&lt;/li&gt;
&lt;li&gt;Create your AWS &lt;strong&gt;Stuff&lt;/strong&gt;                          - s3_website cfg apply&lt;/li&gt;
&lt;li&gt;Point a CNAME at your CloudFront bucket&lt;/li&gt;
&lt;li&gt;Publish your Site to your s3 bucket                - s3_website push&lt;/li&gt;
&lt;li&gt;Repeat steps 5,6 and 9 for fun and profit!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;toc_3&quot;&gt;&lt;/h1&gt;

&lt;h3 id=&quot;toc_4&quot;&gt;Install s3_website&lt;/h3&gt;

&lt;p&gt;on my shiny new Mac, I wasn&amp;#39;t able to install s3_website due to failed dependency&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;https://github.com/laurilehmijoki/s3_website&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;alaric@dhcp-128-103-209-223 splunk-searches&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -b s3_website
ERROR:  While executing gem ... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Gem::FilePermissionError&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    You don&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;t have write permissions into the /Library/Ruby/Gems/1.8 directory.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@dhcp-128-103-209-223 splunk-searches&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install -b s3_website
Password:
ERROR:  Error installing s3_website:
  nokogiri requires Ruby version &amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1.9.2.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However thanks to brew I was able to use a newer version of Ruby and get it installed!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install ruby


&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@preator ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install -b s3_website
Password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After proving that I know nothing about Ruby paths.. @hakamadare turned me on to &lt;a href=&quot;https://github.com/sstephenson/rbenv#homebrew-on-mac-os-x&quot;&gt;rbenv&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@vpn-209-21 ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install &lt;span class=&quot;nv&quot;&gt;rbenv&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Downloading https://github.com/sstephenson/rbenv/archive/v0.4.0.tar.gz
&lt;span class=&quot;c&quot;&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Caveats
To use Homebrew&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;s directories rather than ~/.rbenv add to your profile:
  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RBENV_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/var/rbenv

To &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;shims and autocompletion add to your profile:
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;which rbenv &amp;gt; /dev/null; &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(rbenv init -)&amp;quot;&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Summary
🍺  /usr/local/Cellar/rbenv/0.4.0: 31 files, 152K, built in 2 seconds
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@vpn-209-21 ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install ruby-build
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Installing dependencies &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ruby-build: &lt;span class=&quot;nv&quot;&gt;autoconf&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Installing ruby-build dependency: &lt;span class=&quot;nv&quot;&gt;autoconf&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Downloading http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
&lt;span class=&quot;c&quot;&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; ./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/Cellar/autoconf/2.69
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; make install
🍺  /usr/local/Cellar/autoconf/2.69: 69 files, 2.0M, built in 22 &lt;span class=&quot;nv&quot;&gt;seconds&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Installing ruby-build
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Downloading https://github.com/sstephenson/ruby-build/archive/v20130923.tar.gz
&lt;span class=&quot;c&quot;&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; ./install.sh
🍺  /usr/local/Cellar/ruby-build/20130923: 84 files, 372K, built in 2 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in my case, I had to source my .bash_profile again after switching ruby versions with rbenv, (So for those keeping score, three (ahhahah) versions of ruby now)  to get the gem to show up in my path (two versions of s3_website..)&lt;/p&gt;

&lt;p&gt;source .bash_profile&lt;/p&gt;

&lt;p&gt;AWS Creds&lt;/p&gt;

&lt;p&gt;Since we are all agile and stuff, multiple people will be updating the blog - so I didn&amp;#39;t want to put AWS credentials into the repo itself.. plus we &lt;em&gt;are&lt;/em&gt; publishing them on github, so I thought i&amp;#39;d source them from ENV variables as per the instructions on the s3_website docs... but I source in my AWS Creds this way in my bash_profile file&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AWS_CONFIG_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/aws_creds.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AND! --- FAIL! &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;s3_website cfg apply
Applying the configurations in s3_website.yml on the AWS services ...
/Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/lib/configure-s3-website/http_helper.rb:62:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;digest&lt;span class=&quot;s1&quot;&gt;&amp;#39;: no implicit conversion of nil into String (TypeError)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;from /Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/lib/configure-s3-website/http_helper.rb:62:in `create_s3_digest&amp;#39;&lt;/span&gt;
from /Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/lib/configure-s3-website/http_helper.rb:6:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;call_s3_api&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;from /Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/lib/configure-s3-website/s3_client.rb:34:in `enable_website_configuration&amp;#39;&lt;/span&gt;
from /Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/lib/configure-s3-website/s3_client.rb:12:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;configure_website&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;from /Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/lib/configure-s3-website/runner.rb:4:in `run&amp;#39;&lt;/span&gt;
from /Users/alaric/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/configure-s3-website-1.4.0/bin/configure-s3-website:12:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;from /Users/alaric/.rbenv/versions/2.0.0-p247/bin/configure-s3-website:23:in `load&amp;#39;&lt;/span&gt;
from /Users/alaric/.rbenv/versions/2.0.0-p247/bin/configure-s3-website:23:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But thats ok, it&amp;#39;s a quick hack! &lt;/p&gt;

&lt;p&gt;EPIC FAIL AGAIN!!! &lt;/p&gt;

&lt;p&gt;Why? Because sometime I assume I&amp;#39;m smarting then the instructions.... and am mostly wrong. the envirment variables they want you to use are&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S3_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;ID&amp;gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S3_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;SECRET&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOT aws_access_key_id, and aws_secret_access_key which I, having read the AWS docs (ok, skimmed) tried first! &lt;/p&gt;

&lt;p&gt;=== AND THEN! ===&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;s3_website cfg apply
Applying the configurations in s3_website.yml on the AWS services ...
Created bucket cloudhacks.huit.harvard.edu in the US Standard Region
Bucket cloudhacks.huit.harvard.edu now functions as a website
Bucket cloudhacks.huit.harvard.edu is now readable to the whole world
No redirects to configure &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cloudhacks.huit.harvard.edu bucket
Do you want to deliver your website via CloudFront, the CDN of Amazon? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and BAM!! a freaking awesome bucket! &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;s3_website push
Deploying _site/* to cloudhacks.huit.harvard.edu
Calculating diff ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
Uploading 19 new file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Upload archive.html: Success!
Upload 404.html: Success!
Upload 2013/09/27/hello-world/index.html: Success!
Upload assets/themes/tom/css/screen.css: Success!
Upload assets/themes/tom/images/rss.png: Success!
Upload assets/themes/tom/css/syntax.css: Success!
Upload assets/themes/twitter/bootstrap/css/bootstrap.2.2.2.min.css: Success!
Upload assets/themes/twitter/bootstrap/img/glyphicons-halflings-white.png: Success!
Upload assets/themes/twitter/bootstrap/img/glyphicons-halflings.png: Success!
Upload categories.html: Success!
Upload atom.xml: Success!
Upload assets/themes/twitter/css/style.css: Success!
Upload Genfile: Success!
Upload index.html: Success!
Upload History.markdown: Success!
Upload pages.html: Success!
Upload rss.xml: Success!
Upload sitemap.txt: Success!
Upload tags.html: Success!
Done! Go visit: http://cloudhacks.huit.harvard.edu.s3-website-us-east-1.amazonaws.com/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK - that was pretty sweet... but I can totall do that on my own... it&amp;#39;s just s3 right??  Lets CDN this bad larry! - So I&amp;#39;ll run s3_website cfg apply again and see what happens!! &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;s3_website cfg apply
Applying the configurations in s3_website.yml on the AWS services ...
Bucket cloudhacks.huit.harvard.edu now functions as a website
Bucket cloudhacks.huit.harvard.edu is now readable to the whole world
No redirects to configure &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cloudhacks.huit.harvard.edu bucket
Do you want to deliver your website via CloudFront, the CDN of Amazon? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
y
  The distribution E2KIUNT4276WHO at d99xfp4zz9wie.cloudfront.net now delivers the bucket cloudhacks.huit.harvard.edu
    Please allow up to 15 minutes &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the distribution to initialise
    For more information on the distribution, see https://console.aws.amazon.com/cloudfront
  Added setting &lt;span class=&quot;s1&quot;&gt;&amp;#39;cloudfront_distribution_id: E2KIUNT4276WHO&amp;#39;&lt;/span&gt; into s3_website.yml
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;jobs&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;+  Stopped                 vim _config.yml
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;-  Stopped                 vim s3_website.yml
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fg &lt;/span&gt;2
vim s3_website.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I have d99xfp4zz9wie.cloudfront.net as a target for our awesome blog! I was totally ready for my sweet sweet vicotry! &lt;/p&gt;

&lt;p&gt;So All I needed to do now was to create the CNAME in DNS with our DNS Admin tool! Click-Click Click... and &lt;/p&gt;

&lt;p&gt;BAAA-- wait... --- no BAM??!&lt;/p&gt;

&lt;p&gt;I get this??!!&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;toc_5&quot;&gt;ERROR&lt;/h2&gt;

&lt;p&gt;The request could not be satisfied.
Generated by cloudfront (CloudFront)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;OK- Back to reading the &lt;a href=&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html&quot;&gt;AWS CloudFront Docs&lt;/a&gt; and apprently I need to add an alternate domain name to the CloudFront Config, Luckly s3_website lets me do that with just a bit of editing to the config file! &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;cloudfront_distribution_config&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;l-Scalar-Plain&quot;&gt;CNAME&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cloudhacks.huit.harvard.edu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After updating the config, I gave s3_website another spin - &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;alaric@preator cloudeng.github.io&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;s3_website cfg apply
Applying the configurations in s3_website.yml on the AWS services ...
Bucket cloudhacks.huit.harvard.edu now functions as a website
Bucket cloudhacks.huit.harvard.edu is now readable to the whole world
No redirects to configure &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cloudhacks.huit.harvard.edu bucket
Detected an existing CloudFront distribution &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id E2KIUNT4276WHO&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
  Applied custom distribution settings:
    aliases:
      quantity: 1
      items:
        CNAME: cloudhacks.huit.harvard.edu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the AWS Console, I can see my new Domain added, and the distribution is listed as &amp;quot;In Progress&amp;quot; &lt;/p&gt;

&lt;p&gt;And with that - after waiting about 10 minutes for the content to update, I got my much anticipated &amp;quot;BAM!&amp;quot; and vicotry dance! Welcome to the &lt;a href=&quot;http://cloudhacks.huit.harvard.edu/&quot;&gt;Cloud Hacks blog!&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To Push Posts we just use the s3_website push command!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;Deploying _site/* to cloudhacks.huit.harvard.edu
Calculating diff ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
No new or changed files to upload
Done! Go visit: http://cloudhacks.huit.harvard.edu.s3-website-us-east-1.amazonaws.com/index.html
Invalidating Cloudfront items...
  /
succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After All that, I thought I was golden, however I couldn&amp;#39;t for the life of me get links working! &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# This is the default format. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For more see: http://jekyllrb.com/docs/permalinks/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#permalink: /:categories/:year/:month/:day/:title &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The End&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tfhartmann&quot;&gt;@tfhartmann&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://cloudhacks.huit.harvard.edu/2013/10/21/how-i-made-this-blog.html</link>
                <guid>http://cloudhacks.huit.harvard.edu/2013/10/21/how-i-made-this-blog</guid>
                <pubDate>2013-10-21T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Hello World</title>
                <description>&lt;p&gt;So this is my first post!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tfhartmann&quot;&gt;@tfhartmann&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://cloudhacks.huit.harvard.edu/2013/09/27/hello-world.html</link>
                <guid>http://cloudhacks.huit.harvard.edu/2013/09/27/hello-world</guid>
                <pubDate>2013-09-27T00:00:00-04:00</pubDate>
        </item>


</channel>
</rss>
